{"basic_builder": {"appname": "TA-microsoft-graph-security-add-on-for-splunk", "friendly_name": "Microsoft Graph Security Add-on for Splunk", "version": "1.2.3", "author": "Microsoft Graph Security Team", "description": "Add-on to manage Microsoft Graph Security API alerts into Splunk.", "theme": "#297ba5", "large_icon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAcZSURBVHhe7ZsJTBRXGMf/6wILFAoiKiqKsoAnntG2WttUe5hqbRtLm9Q01rT2MJraerBWa0V6oRRrq61Se6RNjxhMNVVJatUEMdjWREUEQU6JwCoCcp+7/d7sE0V3mZ3dmd0lmV/Y7HsvwzD7m/fe9703iwaGXDNUbNKPv6vYQBUkgipIBFWQCKogEVRBIqiCRFAFiaAKEsEzBFEur6WXNxXZS2umiofk9+5bapjMmDcmAOlLR/CGe2npMGHe3ivIKG1x2610vSASs2fRULwxI5g32Mfmo9eR8He1y0W5ThCJ+WTeYKx/bABvcIy3D1Rh9+kaunINb1EW5QXRfPLSxCD8/vIw3uA87V1mTN9ZguzKNvYJFEUxQRrqMatmhyJlwSDeogwLfirH4YsNNPSUMSWPIHYG6ikRQd54YXIQkp9WVootXk2rwNFLjaho6KRPRsJkcCZJkK9WgyVTghDop0VkiDcmhunwwAg/eCl095yFRcGsKy3IMbahrK4DTc1d2HPmpiRxkgSF6PrhxubRvNY30cTnSYqEaiYtgipIhD4nKPbzImjW5fKa8vQ5QY0dNGVSsNCyucQF9NkhZqJI5L/hEq8pR98URJl0wRo9WjpN8FNYUh8UREOMfqJDfZC/NgqtJEnJ4SZJkCckhCWGaJi3jRPKMSQp+109TFRWauKWlCj2p0SxxsFEcfFvVxE36X48Ny6QtwCv7a9EOi0NEp8aiE1/XUdxfBQikwpx7p1ITN5RbDPh7aJ1XuXGGF4Dzla0YuqOEmhouWPaapFnC0UTxdZOu1324OGvS/Frdj2SjlfzFgvVjZ2orGtHQ5sJFbUdwtCpoCUBE8Der9p4VbFj72DKUF/qSZEwUw/XvS/vcJO2WKW+bE4ayyv2MZvkZJa3COUHh/kia8UooawEGgMbZho0bhmN+3ys33uPWmrM+KoEmbRYXDg2QNgwUxLteouconV6m3IEJE6jkrc7zJ/a14Me2lWK09Rz4mIDsW9xuDCJjh2sw5fPhjm9Hz+BzjMk0Esos+HoJQwrDWo/jEGwn1Zot0ZxTQf02wp5zT4kC8p4MwKzR/rzmnVmkpwskvP69GB8u2iI0KZZS3eYMmCnYaeguZBFsg7Kh3yYHI0GeasjMWagznKMDbZm3EB8+jVesw/JgpbP6I9dz4fx2r1M2l6MbGMblpGcVC5HTliUK6luRxdFKy2bc0jOmZUjMW2YHz/CNnNTy3C8pJnX7EPyHJSWU89L9zLlC4ucpdOUkcNgj8yEtRiXc4Gilz1yGMeLpMlhSBZ0rbGLl3qyj8L4OZIzmULu93HKyOmGDTOSU7EhWpiP7MaBES49itFvnK9q5ZXbvDjxfoQHeOEcJW0GK+OcTdIaQ571V3wuTtDdZeV6yonY+4miJiEkp5ys4We4BXUh+mlKHN09UdtD2gXq+Q4IkjwHMRaOCcDBJcN5rSfhHxfgakMXNs4JReKTA3krcCC3weaDB3YBsyL8cKq0BfPp3Ecou54Z4Y9TZc2YEKaDPsTHciDBJuZOilx+3tLubVhiAYzN1nt/bzgkiOU05iTbKf245CLk0US6aW4oEp6wSIo/ZMTw/t5YMStEqLsScgqv9Sza8QYJSB9iDOoKBSTAFrlr9Bg/SIctx6ppuBmFNhZifzl7Uyi7mj9yGhySw3BMEBGb3HvClfNeJGIG+CApowbLD1Y5fIFyEPdzOS9Jx2FB7fSJxcZm/lo9RgV545vTtUKvcwdtbIHtRILqsCDWI+xZORcbohAdzL714x78N4hfY284LojooNU926oQoyA+Co9SlFo8VdpXXpyF7ROZ2CNoJ3Asit1BMK2caxM882mrD0WunjtH0nGqBzHq2k3YmUVzjIexbH+l03IYTgtirDxQpfR2jySuN3Vh7391vOYcsghiZ/Hd6NxkKBfsRg1KyJctrZBHEMEm7Pk/OJ5vyMXIzy7Ls+/EkU0Q40hBI1YftmTO7mBOahnK6zt5TR5kFcRIyawhSdJ27eTg8e+u4ITEzTB7kF0QIyXzBt6iidtVPLK7FMcKm3hNXhQRxNjzTy2e+VHZOYkFzphthThZZnmspASKCWIcym9E2EcFoms2R2DRim1hXK6RI9uxjaKCGEbKSfqtyxW+UCkXl6vboTXkCc/klUZxQQIUdv0/yEfqv85n3Kv+NCImuchVV+78WkwqEUFeKDVE85o0dBsuod3FKbuL7sNtym52Chv4JXd9AaE3zle2Chv7rpbDcHkP6ob+6qLxgUh7JZw3WGfC9mJcNCr/Pxm2cHkP6oY+8P7cBnhTJLpQRQLuIp0iIOs1F6+5Tw7DfT3oTugKYsN0yF4VKYRvPa2nSmVeMjiKZwi6xa0rcWOPuRv3DTFrMDEeJIfhWYI8EFWQCKogEVRBIqiCRFAFiaAKEkEVJIIqqFeA/wF05YpVLlArmwAAAABJRU5ErkJggg==", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAKHSURBVFhHY2SouPafYRABJig9aMCogwiBYeYgYHYI0uJlOJ2tyHAyS4HBWYkbKkE+IC+XAXX879CEcrADxsrrUBZpgOQQOpKhQNAxIPC/XZNhdZQMlEc8wB1C/0DBwMAgL8zKsDNZnkFdhA0qQR649uong/2MhwxvvvwB2QoMChCBCbA7iIgooRTgilKa5bLEFU+hLNIAzRy04MInBuZy0hM2Tcuho9kKDEwkOopmDgKlQQs5Toa75SoMnNU3oKKEAXYHYc8AYOA06yEDYwXC1y8//2G4DsxBp5/8YDj7FBWDgKIQK8OpXEUGxpKrYD4hQFIImU66zyDNzwLlQYA4LwuDphg7g6kMB4OxNCoGAVAW1ptwj+F/jzaYTwjgLIdABRsyMJt8n0ENaPGScCkGle67DP//Y9UGB/fe/wabAQpNbEUIrmyP00H3y1QYFARZwWzDifcYTGQ4GWYHS4L5xABYtGJzTN2e1wzNe99AeagAb0n9v1MLyoFYADOcsewamIaDf8C0AizRhXhYGM4A0wsIMJZeZfjfjT2awI7FkU5xOwgI0KMN5ijG8msojiUV4Kt48Sbqln2owQp2DNh3eLIhARC2FH8JjtdBtbtfQ1kIAI42AgkaH1h95ROUhR0QzPYe8x5BWQhAbnQJNt6CsnADgg7aefsrlEU5+PDjL5SFGxBVMJLb+kMGxJpBlINAgBJHkaKXaAeBADmOIlUPSQ4CAZAFoOYoIbDnzlfyPICvYMQHeFgZGT43aUB5qIAN6JDfUDapgOQQgoEvv/9jhMBfoNdAYuQ6BgTIDiFkwA4suX/+BVZoOHoSpACyQwgZ/ASV3FRwDAhQxUHUBKMOIgQGmYMYGADF5dXVuRtTVwAAAABJRU5ErkJggg==", "visible": true, "tab_version": "4.0.0", "tab_build_no": "0", "build_no": 9}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "GraphSecurityAlert", "interval": "300", "use_external_validation": true, "streaming_mode_xml": true, "data_inputs_options": [{"type": "customized_var", "name": "tenant", "title": "Azure AD Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "filter", "title": "OData Filter", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": "ex: severity eq 'high'"}, {"type": "customized_var", "name": "app_account", "title": "App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}], "title": "Microsoft Graph Security", "parameters": [{"name": "tenant", "label": "Azure AD Tenant ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "1063531e-68b1-4ff2-9546-d8d2d8a584c4"}, {"name": "filter", "label": "OData Filter", "help_string": "", "required": false, "format_type": "text", "default_value": "", "placeholder": "ex: severity eq 'high'", "type": "text", "value": ""}, {"name": "app_account", "label": "App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}], "type": "customized", "customized_options": [{"name": "tenant", "value": "1063531e-68b1-4ff2-9546-d8d2d8a584c4"}, {"name": "filter", "value": ""}, {"name": "app_account", "value": "account0"}], "sample_count": 0, "description": "Microsoft Graph Security API connector", "code": "# encoding = utf-8\n\nimport json\nimport datetime\nimport splunk.entity\nimport urllib\nimport sys\n\nGRAPH_ALERTS_URL = 'https://graph.microsoft.com/v1.0/security/alerts'\nACCESS_TOKEN = 'access_token'\nCLIENT_ID = 'client_id'\nCLIENT_SECRET = 'client_secret'\nTENANT = 'tenant'\nLOG_DIRECTORY_NAME = 'logs'\nTIME_FORMAT = '%Y-%m-%dT%H:%M:%S.000Z'\n\n\ndef validate_input(helper, definition):\n    interval_in_seconds = int(definition.parameters.get('interval'))\n    if interval_in_seconds < 300:\n        raise ValueError(\"field 'Interval' should be at least 300\")\n    filter_arg = definition.parameters.get('filter')\n    if filter_arg is not None and 'lastModifiedDateTime' in filter_arg:\n        raise ValueError(\"'lastModifiedDateTime' is a reserved property and cannot be part of the filter\")\n\n\ndef _get_access_token(helper):\n    _data = {\n        CLIENT_ID: helper.get_arg('app_account')['username'],\n        'scope': 'https://graph.microsoft.com/.default',\n        CLIENT_SECRET: helper.get_arg('app_account')['password'],\n        'grant_type': 'client_credentials'\n        }\n    _url = 'https://login.microsoftonline.com/' + helper.get_arg('tenant') + '/oauth2/v2.0/token'\n    if (sys.version_info > (3,0)):\n        access_token = helper.send_http_request(_url, \"POST\", payload=urllib.parse.urlencode(_data), timeout=(15.0, 15.0)).json()\n    else:\n        access_token = helper.send_http_request(_url, \"POST\", payload=urllib.urlencode(_data), timeout=(15.0, 15.0)).json()\n    return access_token[ACCESS_TOKEN]\n\n\ndef _get_app_version(helper):\n    app_version = \"\"\n    if 'session_key' in helper.context_meta:\n        session_key = helper.context_meta[\"session_key\"]\n        entity = splunk.entity.getEntity('/configs/conf-app','launcher', namespace=helper.get_app_name(), sessionKey=session_key, owner='nobody')\n        app_version = entity.get('version')\n    return app_version\n\n\ndef _write_events(helper, ew, alerts=None):\n    if alerts:\n        for alert in alerts:\n            event = helper.new_event(\n                source=helper.get_input_type(),\n                index=helper.get_output_index(),\n                sourcetype=helper.get_sourcetype(),\n                data=json.dumps(alert))\n            ew.write_event(event)\n\n\ndef collect_events(helper, ew):\n    access_token = _get_access_token(helper)\n    headers = {\"Authorization\": \"Bearer \" + access_token,\n                \"User-Agent\": \"MicrosoftGraphSecurity-Splunk/\" + _get_app_version(helper)}\n    interval_in_seconds = int(helper.get_arg('interval'))\n    check_point_key = \"%s_is_first_time_collecting_events\" % helper.get_input_stanza_names()\n    is_first_time_collecting_events = helper.get_check_point(check_point_key)\n    if is_first_time_collecting_events != 'false':\n        helper.save_check_point(check_point_key, 'false')\n        filter_val = ''\n    else:\n        filter_val = 'lastModifiedDateTime gt ' + (datetime.datetime.utcnow() - datetime.timedelta(seconds=interval_in_seconds)).strftime(TIME_FORMAT) + ' and lastModifiedDateTime lt '  + datetime.datetime.utcnow().strftime(TIME_FORMAT)\n\n\n\n\n    filter_arg = helper.get_arg('filter')\n    if filter_arg != '' and filter_arg is not None and filter_arg != 'null':\n        if filter_val != '':\n            filter_val += ' and '\n        filter_val += filter_arg\n    params = {'$filter': filter_val}\n\n    response = helper.send_http_request(GRAPH_ALERTS_URL, \"GET\", headers=headers, parameters=params, timeout=(15.0, 15.0)).json()\n\n    #helper.log_debug(\"GET Response: \" + json.dumps(response, indent=4))\n    alerts = []\n    if \"error\" in response:\n        helper.log_info(\"Make sure your app with id {} has the Microsoft Graph \\\"SecurityEvents.Read.All\\\" permission and your tenant admin has given your application admin consent\".format(helper.get_arg('app_account')['username']))\n        raise ValueError(\"Error occured : \" + json.dumps(response, indent=4))\n    if isinstance(response['value'], dict):\n            alerts = alerts + [response['value']]\n    elif isinstance(response['value'], list):\n        alerts = alerts + response['value']\n    remove_nulls(alerts)\n    _write_events(helper, ew, alerts=alerts)\n\n    while (\"@odata.nextLink\" in response) and (is_https(response[\"@odata.nextLink\"])):\n        response = helper.send_http_request(response[\"@odata.nextLink\"],\"GET\", headers=headers, timeout=(15.0, 15.0)).json()\n        alerts = []\n        if isinstance(response['value'], dict):\n            alerts = alerts + [response['value']]\n        elif isinstance(response['value'], list):\n            alerts = alerts + response['value']\n        remove_nulls(alerts)\n        _write_events(helper, ew, alerts=alerts)\n\n\ndef is_https(url):\n    if url.startswith(\"https://\"):\n        return True\n    else:\n        return False\n\n\ndef remove_nulls (d):\n    \"\"\" Funtion to remove all null or empty values from the JSON response.\"\"\"\n    if isinstance(d, dict):\n        for  k, v in list(d.items()):\n            if v is None or v == '' or v == []:\n                del d[k]\n            else:\n                remove_nulls(v)\n    if isinstance(d, list):\n        for v in d:\n            remove_nulls(v)\n    return d\n\n", "uuid": "03cea15d473048ff8b56881b5e198e77", "name": "microsoft_graph_security"}]}, "field_extraction_builder": {"GraphSecurityAlert": {"data_format": "json", "is_parsed": true}}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_port": "", "proxy_type": "http", "proxy_url": "", "proxy_enabled": false}, "log_settings": {"log_level": "DEBUG"}, "credential_settings": []}}, "sourcetype_builder": {"GraphSecurityAlert": {"metadata": {"cims_count": 0, "event_count": 0, "data_input_name": "microsoft_graph_security", "extractions_count": 0}}}, "validation": {"status": "job_finished", "validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "validation_id": "v_1574128619_88", "progress": 1.0}}